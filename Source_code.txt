import React, { useState, useEffect, useRef } from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, Sector } from 'recharts';
import { ChevronRight, Bot, X, User, Calendar, Stethoscope, Leaf, LayoutDashboard, Send, Plus, Search, MoreVertical, Droplets, Package, CreditCard, Settings, XCircle, Mail, Phone, History, Building, Tag, Bell, UserCircle, Edit3, PlayCircle } from 'lucide-react';

// --- MOCK DATA ---
const doshaData = [
  { name: 'Vata', value: 400 },
  { name: 'Pitta', value: 300 },
  { name: 'Kapha', value: 300 },
];

const COLORS = ['#A78BFA', '#818CF8', '#F472B6'];

const weeklyActivityData = [
  { name: 'Mon', calories: 2200, steps: 8500 },
  { name: 'Tue', calories: 2100, steps: 7200 },
  { name: 'Wed', calories: 2400, steps: 9800 },
  { name: 'Thu', calories: 2300, steps: 8900 },
  { name: 'Fri', calories: 2500, steps: 10500 },
  { name: 'Sat', calories: 2600, steps: 12500 },
  { name: 'Sun', calories: 2550, steps: 9200 },
];

const upcomingAppointments = [
    { id: 1, name: "Anjali Sharma", time: "10:30 AM", condition: "Pitta Imbalance", avatar: 'https://i.pravatar.cc/150?img=1' },
    { id: 2, name: "Rohan Verma", time: "11:15 AM", condition: "Vata Aggravation", avatar: 'https://i.pravatar.cc/150?img=2' },
    { id: 3, name: "Priya Singh", time: "12:00 PM", condition: "Kapha-Vata constitution", avatar: 'https://i.pravatar.cc/150?img=3' },
];

const patientsData = [
    { id: 1, name: "Anjali Sharma", age: 34, prakriti: "Pitta-Kapha", lastVisit: "2023-10-15", avatar: 'https://i.pravatar.cc/150?img=1', email: "anjali.sharma@example.com", phone: "987-654-3210", history: "Chronic acidity and skin rashes. Responding well to Pitta pacifying diet." },
    { id: 2, name: "Rohan Verma", age: 45, prakriti: "Vata", lastVisit: "2023-10-12", avatar: 'https://i.pravatar.cc/150?img=2', email: "rohan.verma@example.com", phone: "876-543-2109", history: "Reports issues with anxiety and dry skin. Vata grounding diet suggested." },
    { id: 3, name: "Priya Singh", age: 28, prakriti: "Kapha-Vata", lastVisit: "2023-10-18", avatar: 'https://i.pravatar.cc/150?img=3', email: "priya.singh@example.com", phone: "765-432-1098", history: "Suffering from sluggishness and congestion. Kapha energizing diet initiated." },
    { id: 4, name: "Amit Patel", age: 52, prakriti: "Pitta", lastVisit: "2023-09-25", avatar: 'https://i.pravatar.cc/150?img=4', email: "amit.patel@example.com", phone: "654-321-0987", history: "Patient has a history of high blood pressure and irritability." },
    { id: 5, name: "Sunita Reddy", age: 41, prakriti: "Vata-Pitta", lastVisit: "2023-10-20", avatar: 'https://i.pravatar.cc/150?img=5', email: "sunita.reddy@example.com", phone: "543-210-9876", history: "Deals with digestive issues and inflammation. A balanced diet was prescribed." },
];

const appointmentsData = [
    { id: 1, patientName: "Anjali Sharma", date: "2023-11-05", time: "10:30 AM", type: "Follow-up", status: "Upcoming", notes: "Review diet plan effectiveness and skin condition. Discuss any new symptoms." },
    { id: 2, patientName: "Rohan Verma", date: "2023-11-05", time: "11:15 AM", type: "Initial Consultation", status: "Upcoming", notes: "Conduct a full Prakriti analysis. Discuss lifestyle and dietary habits." },
    { id: 3, name: "Vikram Kumar", date: "2023-11-06", time: "09:00 AM", type: "Panchakarma Session", status: "Upcoming", notes: "Patient is scheduled for Abhyanga and Swedana therapy." },
    { id: 4, patientName: "Priya Singh", date: "2023-11-02", time: "02:00 PM", type: "Follow-up", status: "Completed", notes: "Patient reported significant improvement in energy levels. Continued current plan." },
    { id: 5, patientName: "Amit Patel", date: "2023-11-01", time: "10:00 AM", type: "Follow-up", status: "Completed", notes: "Blood pressure is stable. Patient is calmer. Minor tweaks to herbal supplements." },
    { id: 6, patientName: "Neha Desai", date: "2023-11-03", time: "01:30 PM", type: "Initial Consultation", status: "Cancelled", notes: "Patient cancelled due to a personal emergency. Needs to reschedule." },
];

const dietPlansData = [ { id: 1, planName: "Pitta Pacifying Diet", dosha: "Pitta", description: "A cooling diet to balance pitta dosha, focusing on sweet, bitter, and astringent tastes.", guidelines: ["Favor cool, heavy, and slightly dry foods.","Incorporate sweet fruits like melons, cherries, and grapes.","Include cooling vegetables like cucumber, broccoli, and zucchini.","Avoid spicy, salty, and sour foods.","Drink cool (but not iced) water and herbal teas."], sampleMeals: { breakfast: "Oatmeal with sweet berries and a touch of maple syrup.", lunch: "Basmati rice with steamed vegetables and mung dal.", dinner: "Baked sweet potato with a side of asparagus and a light salad." } }, { id: 2, planName: "Vata Grounding Diet", dosha: "Vata", description: "A warm, nourishing diet to ground vata dosha, with sweet, sour, and salty tastes.", guidelines: ["Eat warm, cooked, and oily foods.","Incorporate sweet, ripe fruits and cooked vegetables.","Use warming spices like ginger, cinnamon, and cumin.","Avoid cold, dry, and raw foods.","Maintain a regular meal schedule."], sampleMeals: { breakfast: "Warm spiced milk with cooked rice cereal.", lunch: "Kitchari (rice and lentil porridge) with ghee.", dinner: "Root vegetable stew with whole-wheat bread." } }, { id: 3, planName: "Kapha Energizing Diet", dosha: "Kapha", description: "A light, stimulating diet to energize kapha dosha, emphasizing pungent, bitter, and astringent foods.", guidelines: ["Favor light, dry, and warm foods.","Eat plenty of pungent and bitter vegetables like leafy greens.","Use stimulating spices such as black pepper, cayenne, and turmeric.","Avoid heavy, oily, and cold foods, especially dairy.","Focus on a lighter dinner and avoid snacking."], sampleMeals: { breakfast: "Stewed apples with cinnamon.", lunch: "Quinoa with stir-fried vegetables and chickpeas.", dinner: "Lentil soup with a side of steamed broccoli." } }, { id: 4, planName: "Tridoshic Harmony Diet", dosha: "Tridoshic", description: "A balanced diet suitable for all dosha types, promoting overall wellness and harmony.", guidelines: ["Focus on fresh, organic, and seasonal foods.","Include all six tastes (sweet, sour, salty, pungent, bitter, astringent) in moderation.","Eat mindfully and in a calm environment.","Listen to your body's hunger and fullness cues.","Incorporate gentle spices like coriander and fennel."], sampleMeals: { breakfast: "Cooked grains with seasonal fruit.", lunch: "A balanced plate of whole grains, lean protein, and mixed vegetables.", dinner: "A simple vegetable and lentil curry with rice." } },];
const consultationsData = [ { id: 1, patientName: "Priya Singh", date: "2023-10-18", summary: "Discussed progress on Kapha-Vata diet. Patient reports improved energy levels. Minor adjustments to herbal supplements made." }, { id: 2, patientName: "Anjali Sharma", date: "2023-10-15", summary: "Initial consultation for Pitta imbalance. Recommended cooling foods, stress management techniques, and Abhyanga massage." }, { id: 3, patientName: "Rohan Verma", date: "2023-10-12", summary: "Follow-up on Vata aggravation. Patient feels more grounded. Advised to continue with routine and meditation." },];
const inventoryData = [ { id: 1, productName: "Triphala Churna", stock: 45, category: "Herbal Powders", supplier: "Banyan Botanicals", description: "A classic Ayurvedic herbal formulation for detoxification and rejuvenation." }, { id: 2, productName: "Ashwagandha Tablets", stock: 80, category: "Tablets", supplier: "Himalaya Wellness", description: "An adaptogenic herb that helps the body manage stress and boosts vitality." }, { id: 3, productName: "Mahanarayan Oil", stock: 25, category: "Medicated Oils", supplier: "Vaidya's Ayurveda", description: "A traditional massage oil used to soothe sore muscles and joints." }, { id: 4, productName: "Chyawanprash", stock: 60, category: "Herbal Jams", supplier: "Dabur", description: "A nutritive jam rich in antioxidants that supports immunity and overall health." },];
const billingData = [ { id: 1, invoiceId: "INV-2023-001", patientName: "Anjali Sharma", date: "2023-11-05", amount: 150.00, status: "Paid", items: [{ name: "Follow-up Consultation", qty: 1, price: 75.00 }, { name: "Pitta Pacifying Tea", qty: 3, price: 25.00 }] }, { id: 2, invoiceId: "INV-2023-002", patientName: "Rohan Verma", date: "2023-11-05", amount: 250.00, status: "Pending", items: [{ name: "Initial Consultation", qty: 1, price: 150.00 }, { name: "Vata Grounding Oil", qty: 2, price: 50.00 }] }, { id: 3, invoiceId: "INV-2023-003", patientName: "Priya Singh", date: "2023-11-02", amount: 85.00, status: "Paid", items: [{ name: "Follow-up Consultation", qty: 1, price: 75.00 }, { name: "Herbal Supplement", qty: 1, price: 10.00 }] }, { id: 4, invoiceId: "INV-2023-004", patientName: "Amit Patel", date: "2023-11-01", amount: 120.00, status: "Overdue", items: [{ name: "Follow-up Consultation", qty: 1, price: 75.00 }, { name: "Pitta Cooling Herbs", qty: 1, price: 45.00 }] },];

// --- COMPONENTS ---

const Logo = () => (
    <svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="shrink-0 text-white">
        <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM16.24 16.24C15.07 17.41 13.59 18 12 18C10.41 18 8.93 17.41 7.76 16.24C6.59 15.07 6 13.59 6 12C6 11.12 6.21 10.29 6.58 9.53L14.47 17.42C13.71 17.79 12.88 18 12 18C10.41 18 8.93 17.41 7.76 16.24C6.59 15.07 6 13.59 6 12C6 10.41 6.59 8.93 7.76 7.76C8.93 6.59 10.41 6 12 6C13.59 6 15.07 6.59 16.24 7.76L17.42 6.58C16.07 5.23 14.12 4.5 12 4.5C9.88 4.5 7.93 5.23 6.58 6.58C5.23 7.93 4.5 9.88 4.5 12C4.5 14.12 5.23 16.07 6.58 17.42C7.93 18.77 9.88 19.5 12 19.5C14.12 19.5 16.07 18.77 17.42 17.42L16.24 16.24Z" fill="currentColor"/>
    </svg>
);
const PageHeader = ({ title, children }) => (
    <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
        <h1 className="text-3xl font-bold text-white">{title}</h1>
        <div className="mt-4 sm:mt-0 flex items-center gap-2">
            {children}
        </div>
    </div>
);
const ModernButton = ({ children, icon, className = '', ...props }) => (
    <button className={`flex items-center gap-2 bg-white/10 backdrop-blur-md border border-white/20 rounded-full px-4 py-2 text-white font-semibold hover:bg-white/20 transition-all duration-300 text-sm ${className}`} {...props}>
        {icon}
        {children}
    </button>
);
const SearchInput = () => (
    <div className="relative">
        <Search size={16} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
        <input type="text" placeholder="Search..." className="w-full sm:w-64 bg-white/10 border border-white/20 rounded-full pl-10 pr-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-400 text-sm" />
    </div>
);
const renderActiveShape = (props) => {
    const RADIAN = Math.PI / 180;
    const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle, fill, payload } = props;
    return (
        <g>
            <text x={cx} y={cy} dy={8} textAnchor="middle" fill={fill} className="font-bold text-lg">
                {payload.name}
            </text>
            <Sector cx={cx} cy={cy} innerRadius={innerRadius} outerRadius={outerRadius} startAngle={startAngle} endAngle={endAngle} fill={fill} />
            <Sector cx={cx} cy={cy} startAngle={startAngle} endAngle={endAngle} innerRadius={outerRadius + 4} outerRadius={outerRadius + 8} fill={fill} />
        </g>
    );
};

const DashboardView = ({ setActivePage }) => {
    const [activeIndex, setActiveIndex] = useState(0);
    const onPieEnter = (_, index) => setActiveIndex(index);
    
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white space-y-8 animate-fadeIn">
           <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
               <div className="lg:col-span-1 space-y-8">
                    {/* Upcoming Appointments */}
                    <div className="bg-black/20 p-6 rounded-2xl">
                        <h2 className="text-xl font-bold text-white mb-4">Upcoming Appointments</h2>
                        <div className="space-y-4">
                            {upcomingAppointments.map(patient => (
                                <div key={patient.id} className="flex items-center gap-4 hover:bg-white/10 p-2 rounded-lg transition-colors duration-200">
                                    <img src={patient.avatar} alt={patient.name} className="w-10 h-10 rounded-full object-cover" />
                                    <div>
                                        <p className="font-semibold text-white">{patient.name}</p>
                                        <p className="text-sm text-gray-400">{patient.condition}</p>
                                    </div>
                                    <p className="ml-auto text-sm text-gray-300">{patient.time}</p>
                                </div>
                            ))}
                        </div>
                    </div>
               </div>

               <div className="lg:col-span-2">
                    {/* Featured Card */}
                    <div className="relative bg-gradient-to-br from-purple-900/50 to-indigo-900/50 p-8 rounded-2xl shadow-2xl overflow-hidden min-h-[300px] flex flex-col justify-between">
                        <div className="absolute -right-20 -top-20 w-60 h-60 bg-indigo-500/30 rounded-full filter blur-3xl"></div>
                        <div className="absolute -left-20 -bottom-20 w-60 h-60 bg-purple-500/30 rounded-full filter blur-3xl"></div>
                        <div>
                            <h3 className="text-indigo-300 font-semibold">Featured Focus</h3>
                            <h2 className="text-4xl font-bold text-white mt-2">Current Dosha Balance</h2>
                            <p className="text-gray-300 mt-2 max-w-md">Maintaining equilibrium in the doshas is key to Ayurvedic wellness. This chart reflects the current dominant energies in your system.</p>
                        </div>
                        <div className="flex justify-end">
                           <ModernButton onClick={() => setActivePage('Reports')}>View Full Report</ModernButton>
                        </div>
                    </div>
               </div>
           </div>

           <div className="space-y-8">
                <div>
                     <h2 className="text-2xl font-bold text-white mb-4">Health Overview</h2>
                     <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        <StatCard title="Heart Rate" value="72" unit="bpm" />
                        <StatCard title="Calories" value="1,850" unit="kcal" />
                        <StatCard title="Sleep" value="7.5" unit="hrs" />
                        <StatCard title="Water" value="2.1" unit="L" />
                        <StatCard title="Prakriti" value="Vata-Pitta" isText={true} />
                     </div>
                </div>

                <div>
                     <h2 className="text-2xl font-bold text-white mb-4">Analysis & Trends</h2>
                     <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        <div className="lg:col-span-2 bg-black/20 p-6 rounded-2xl">
                             <h3 className="text-lg font-semibold text-white mb-4">Weekly Activity</h3>
                             <div style={{ width: '100%', height: 250 }}>
                                 <ResponsiveContainer>
                                     <BarChart data={weeklyActivityData} margin={{ top: 5, right: 0, left: -20, bottom: 5 }}>
                                         <XAxis dataKey="name" stroke="rgba(255, 255, 255, 0.5)" axisLine={false} tickLine={false} />
                                         <YAxis stroke="rgba(255, 255, 255, 0.5)" axisLine={false} tickLine={false} yAxisId="left" orientation="left" />
                                         <Tooltip contentStyle={{ backgroundColor: 'rgba(20, 20, 20, 0.8)', border: '1px solid rgba(255,255,255,0.2)', color: '#fff', borderRadius: '10px' }} cursor={{fill: 'rgba(136, 132, 216, 0.1)'}} />
                                         <Bar yAxisId="left" dataKey="calories" fill="#818CF8" name="Calories" radius={[10, 10, 0, 0]} barSize={15} />
                                         <Bar yAxisId="left" dataKey="steps" fill="#A78BFA" name="Steps" radius={[10, 10, 0, 0]} barSize={15} />
                                     </BarChart>
                                 </ResponsiveContainer>
                             </div>
                         </div>
                         <div className="bg-black/20 p-6 rounded-2xl flex flex-col items-center justify-center">
                             <h3 className="text-lg font-semibold text-white mb-4">Dosha Balance</h3>
                             <div style={{ width: '100%', height: 200 }}>
                                <ResponsiveContainer>
                                    <PieChart>
                                         <Pie data={doshaData} dataKey="value" nameKey="name" cx="50%" cy="50%" innerRadius={50} outerRadius={80} fill="#8884d8" paddingAngle={5} activeIndex={activeIndex} activeShape={renderActiveShape} onMouseEnter={onPieEnter} >
                                            {doshaData.map((entry, index) => ( <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} /> ))}
                                        </Pie>
                                    </PieChart>
                                </ResponsiveContainer>
                             </div>
                         </div>
                     </div>
                </div>
           </div>
        </div>
    );
};
const StatCard = ({ title, value, unit, isText }) => (
    <div className="bg-black/20 p-4 rounded-xl hover:bg-white/10 transition-colors duration-200">
        <p className="text-gray-400 text-sm font-medium">{title}</p>
        {isText ? 
            <p className="text-xl font-bold text-white mt-1">{value}</p> :
            <p className="text-2xl font-bold text-white mt-1">{value}<span className="text-base font-medium ml-1 text-gray-300">{unit}</span></p>
        }
    </div>
);

const PatientDetailModal = ({ patient, onClose }) => {
    if (!patient) return null;
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fadeIn" onClick={onClose}>
            <div className="bg-slate-900 border border-white/20 rounded-2xl shadow-2xl max-w-lg w-full p-8 relative animate-fadeIn" onClick={e => e.stopPropagation()}>
                <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors"><XCircle size={28} /></button>
                <div className="flex items-center gap-6 mb-6">
                    <img src={patient.avatar} alt={patient.name} className="w-24 h-24 rounded-full object-cover border-4 border-purple-400/50" />
                    <div>
                        <h2 className="text-3xl font-bold text-white">{patient.name}</h2>
                        <p className="text-gray-300">{patient.age} years old</p>
                        <span className="inline-block mt-2 px-3 py-1 text-sm font-semibold rounded-full bg-indigo-500/20 text-indigo-200">{patient.prakriti}</span>
                    </div>
                </div>
                <div className="space-y-4 text-gray-300">
                    <div className="flex items-center gap-3">
                        <Mail size={18} className="text-purple-300" />
                        <span>{patient.email}</span>
                    </div>
                    <div className="flex items-center gap-3">
                        <Phone size={18} className="text-purple-300" />
                        <span>{patient.phone}</span>
                    </div>
                    <div className="flex items-start gap-3 pt-2">
                        <History size={18} className="text-purple-300 mt-1" />
                        <div>
                            <h3 className="font-semibold text-white mb-1">Clinical History</h3>
                            <p className="text-sm">{patient.history}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};
const PatientsView = () => {
    const [selectedPatient, setSelectedPatient] = useState(null);
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white animate-fadeIn">
            <PageHeader title="Patients">
                <SearchInput />
                <ModernButton icon={<Plus size={16} />}>Add Patient</ModernButton>
            </PageHeader>
            <div className="hidden md:block bg-black/20 rounded-xl shadow-lg overflow-x-auto">
                <table className="w-full text-left">
                    <thead>
                        <tr className="border-b border-white/10">
                            <th className="p-4 font-semibold text-sm">Name</th>
                            <th className="p-4 font-semibold text-sm">Age</th>
                            <th className="p-4 font-semibold text-sm">Prakriti</th>
                            <th className="p-4 font-semibold text-sm">Last Visit</th>
                            <th className="p-4 font-semibold text-sm text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {patientsData.map(patient => (
                            <tr key={patient.id} className="border-b border-white/10 hover:bg-white/5 transition-colors duration-200">
                                <td className="p-4 flex items-center gap-3">
                                    <img src={patient.avatar} alt={patient.name} className="w-10 h-10 rounded-full object-cover" />
                                    <span className="font-medium text-white">{patient.name}</span>
                                </td>
                                <td className="p-4 text-gray-300">{patient.age}</td>
                                <td className="p-4 text-gray-300">{patient.prakriti}</td>
                                <td className="p-4 text-gray-300">{patient.lastVisit}</td>
                                <td className="p-4 text-center">
                                    <ModernButton onClick={() => setSelectedPatient(patient)} className="!px-3 !py-1.5 text-xs">
                                        View Details
                                    </ModernButton>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <div className="md:hidden space-y-4">
                {patientsData.map(patient => (
                    <div key={patient.id} className="bg-black/20 rounded-xl p-4 shadow-lg" onClick={() => setSelectedPatient(patient)}>
                        <div className="flex items-center gap-4">
                            <img src={patient.avatar} alt={patient.name} className="w-12 h-12 rounded-full object-cover"/>
                            <div>
                                <p className="font-bold text-lg text-white">{patient.name}</p>
                                <p className="text-sm text-gray-300">{patient.prakriti}</p>
                            </div>
                        </div>
                        <div className="mt-4 text-sm text-gray-300">
                            Last Visit: {patient.lastVisit}
                        </div>
                    </div>
                ))}
            </div>
            <PatientDetailModal patient={selectedPatient} onClose={() => setSelectedPatient(null)} />
        </div>
    );
};
const AppointmentDetailModal = ({ appointment, onClose }) => {
    if (!appointment) return null;
    const getStatusClass = (status) => {
        switch (status) {
            case 'Upcoming': return 'bg-blue-500/20 text-blue-300';
            case 'Completed': return 'bg-green-500/20 text-green-300';
            case 'Cancelled': return 'bg-red-500/20 text-red-300';
            default: return 'bg-gray-500/20 text-gray-300';
        }
    };
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fadeIn" onClick={onClose}>
            <div className="bg-slate-900 border border-white/20 rounded-2xl shadow-2xl max-w-lg w-full p-8 relative animate-fadeIn" onClick={e => e.stopPropagation()}>
                <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors"><XCircle size={28} /></button>
                <h2 className="text-3xl font-bold text-white mb-2">{appointment.patientName}</h2>
                <p className="text-gray-300 mb-4">{appointment.type}</p>
                <div className="flex items-center gap-4 mb-6">
                    <span className="font-semibold text-white">{appointment.date} at {appointment.time}</span>
                    <span className={`px-3 py-1 text-sm font-semibold rounded-full ${getStatusClass(appointment.status)}`}>
                        {appointment.status}
                    </span>
                </div>
                <div>
                    <h3 className="font-semibold text-white mb-1">Notes for this session:</h3>
                    <p className="text-gray-300 bg-white/5 p-4 rounded-lg">{appointment.notes}</p>
                </div>
            </div>
        </div>
    );
};
const AppointmentsView = () => {
    const [selectedAppointment, setSelectedAppointment] = useState(null);
    const getStatusClass = (status) => {
        switch (status) {
            case 'Upcoming': return 'bg-blue-500/20 text-blue-300';
            case 'Completed': return 'bg-green-500/20 text-green-300';
            case 'Cancelled': return 'bg-red-500/20 text-red-300';
            default: return 'bg-gray-500/20 text-gray-300';
        }
    };
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white animate-fadeIn">
            <PageHeader title="Appointments">
                <ModernButton icon={<Plus size={16} />}>New Appointment</ModernButton>
            </PageHeader>
            <div className="space-y-4">
                {appointmentsData.map(appt => (
                    <div key={appt.id} onClick={() => setSelectedAppointment(appt)} className="bg-black/20 rounded-xl p-4 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 shadow-lg hover:bg-white/10 transition-all duration-300 cursor-pointer">
                        <div className="flex-1">
                            <p className="font-bold text-lg text-white">{appt.patientName}</p>
                            <p className="text-gray-300 text-sm">{appt.type}</p>
                        </div>
                        <div className="text-gray-200 text-sm sm:text-base text-left sm:text-right mt-2 sm:mt-0">{appt.date} at {appt.time}</div>
                        <div className="mt-2 sm:mt-0">
                            <span className={`px-3 py-1 text-sm font-semibold rounded-full ${getStatusClass(appt.status)}`}>
                                {appt.status}
                            </span>
                        </div>
                        <ChevronRight size={20} className="text-gray-400 hidden sm:block" />
                    </div>
                ))}
            </div>
            <AppointmentDetailModal appointment={selectedAppointment} onClose={() => setSelectedAppointment(null)} />
        </div>
    );
};
const DietPlanModal = ({ plan, onClose }) => {
    if (!plan) return null;
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fadeIn" onClick={onClose}>
            <div className="bg-slate-900 border border-white/20 rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto p-8 relative animate-fadeIn" onClick={e => e.stopPropagation()}>
                <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors">
                    <XCircle size={28} />
                </button>
                <h2 className="text-3xl font-bold text-white mb-2">{plan.planName}</h2>
                <span className={`inline-block px-3 py-1 text-sm font-semibold rounded-full mb-6 ${COLORS[plan.dosha === 'Pitta' ? 1 : plan.dosha === 'Vata' ? 0 : 2]} bg-opacity-20 text-white`}>{plan.dosha}</span>
                <p className="text-gray-300 mb-6">{plan.description}</p>
                <div className="space-y-6">
                    <div>
                        <h3 className="text-xl font-semibold text-white mb-3 border-b border-white/20 pb-2">Key Guidelines</h3>
                        <ul className="list-disc list-inside text-gray-300 space-y-2">
                            {plan.guidelines.map((item, index) => <li key={index}>{item}</li>)}
                        </ul>
                    </div>
                    <div>
                        <h3 className="text-xl font-semibold text-white mb-3 border-b border-white/20 pb-2">Sample Meal Ideas</h3>
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm">
                            <div className="bg-white/5 p-4 rounded-lg">
                                <p className="font-semibold text-white mb-1">Breakfast</p>
                                <p className="text-gray-400">{plan.sampleMeals.breakfast}</p>
                            </div>
                            <div className="bg-white/5 p-4 rounded-lg">
                                <p className="font-semibold text-white mb-1">Lunch</p>
                                <p className="text-gray-400">{plan.sampleMeals.lunch}</p>
                            </div>
                            <div className="bg-white/5 p-4 rounded-lg">
                                <p className="font-semibold text-white mb-1">Dinner</p>
                                <p className="text-gray-400">{plan.sampleMeals.dinner}</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};
const DietPlansView = () => {
    const [selectedPlan, setSelectedPlan] = useState(null);
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white animate-fadeIn">
            <PageHeader title="Diet Plans">
                <ModernButton icon={<Plus size={16} />}>Create Plan</ModernButton>
            </PageHeader>
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {dietPlansData.map(plan => (
                    <div key={plan.id} className="bg-black/20 rounded-2xl p-6 shadow-lg hover:bg-white/10 transition-all duration-300 transform hover:-translate-y-1 flex flex-col">
                        <div className="flex-1">
                            <h3 className="text-xl font-bold mb-2 text-white">{plan.planName}</h3>
                            <span className={`inline-block px-3 py-1 text-sm font-semibold rounded-full mb-3 ${COLORS[plan.dosha === 'Pitta' ? 1 : plan.dosha === 'Vata' ? 0 : 2]} bg-opacity-20 text-white`}>{plan.dosha}</span>
                            <p className="text-gray-300 text-sm">{plan.description}</p>
                        </div>
                        <ModernButton onClick={() => setSelectedPlan(plan)} className="mt-4 self-start !px-3 !py-1.5 text-xs">
                            View Details
                        </ModernButton>
                    </div>
                ))}
            </div>
            <DietPlanModal plan={selectedPlan} onClose={() => setSelectedPlan(null)} />
        </div>
    );
};
const ConsultationDetailModal = ({ consultation, onClose }) => {
    if (!consultation) return null;
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fadeIn" onClick={onClose}>
            <div className="bg-slate-900 border border-white/20 rounded-2xl shadow-2xl max-w-lg w-full p-8 relative animate-fadeIn" onClick={e => e.stopPropagation()}>
                <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors"><XCircle size={28} /></button>
                <h2 className="text-3xl font-bold text-white mb-2">{consultation.patientName}</h2>
                <p className="text-gray-300 mb-6">Consultation on {consultation.date}</p>
                <div>
                    <h3 className="font-semibold text-white mb-1">Session Summary</h3>
                    <p className="text-gray-300 bg-white/5 p-4 rounded-lg leading-relaxed">{consultation.summary}</p>
                </div>
            </div>
        </div>
    );
};
const ConsultationsView = () => {
    const [selectedConsultation, setSelectedConsultation] = useState(null);
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white animate-fadeIn">
            <PageHeader title="Consultations">
                <ModernButton icon={<Plus size={16} />}>New Record</ModernButton>
            </PageHeader>
            <div className="space-y-4">
                {consultationsData.map(item => (
                    <div key={item.id} onClick={() => setSelectedConsultation(item)} className="bg-black/20 rounded-xl p-5 shadow-lg hover:bg-white/10 transition-all duration-300 cursor-pointer">
                        <div className="flex justify-between items-center mb-2">
                            <p className="font-bold text-lg text-white">{item.patientName}</p>
                            <p className="text-gray-300 text-sm">{item.date}</p>
                        </div>
                        <p className="text-gray-200 truncate">{item.summary}</p>
                    </div>
                ))}
            </div>
            <ConsultationDetailModal consultation={selectedConsultation} onClose={() => setSelectedConsultation(null)} />
        </div>
    );
};
const InventoryDetailModal = ({ item, onClose }) => {
    if (!item) return null;
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fadeIn" onClick={onClose}>
            <div className="bg-slate-900 border border-white/20 rounded-2xl shadow-2xl max-w-lg w-full p-8 relative animate-fadeIn" onClick={e => e.stopPropagation()}>
                <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors"><XCircle size={28} /></button>
                <h2 className="text-3xl font-bold text-white mb-2">{item.productName}</h2>
                <span className="inline-block mt-2 px-3 py-1 text-sm font-semibold rounded-full bg-purple-500/20 text-purple-200 mb-6">{item.category}</span>
                <div className="space-y-4 text-gray-300 mb-6">
                    <div className="flex items-center gap-3">
                        <Package size={18} className="text-purple-300" />
                        <span><span className="font-semibold text-white">{item.stock}</span> units in stock</span>
                    </div>
                    <div className="flex items-center gap-3">
                        <Building size={18} className="text-purple-300" />
                        <span>Supplier: <span className="font-semibold text-white">{item.supplier}</span></span>
                    </div>
                </div>
                <div>
                    <h3 className="font-semibold text-white mb-1">Description</h3>
                    <p className="text-gray-300 bg-white/5 p-4 rounded-lg leading-relaxed">{item.description}</p>
                </div>
            </div>
        </div>
    );
};
const InventoryView = () => {
    const [selectedItem, setSelectedItem] = useState(null);
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white animate-fadeIn">
            <PageHeader title="Inventory">
                <SearchInput />
                <ModernButton icon={<Plus size={16} />}>Add Product</ModernButton>
            </PageHeader>
            <div className="hidden md:block bg-black/20 rounded-xl shadow-lg overflow-x-auto">
                <table className="w-full text-left">
                    <thead>
                        <tr className="border-b border-white/10">
                            <th className="p-4 font-semibold text-sm">Product Name</th>
                            <th className="p-4 font-semibold text-sm">Category</th>
                            <th className="p-4 font-semibold text-sm">Stock</th>
                            <th className="p-4 font-semibold text-sm">Supplier</th>
                            <th className="p-4 font-semibold text-sm text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {inventoryData.map(item => (
                            <tr key={item.id} className="border-b border-white/10 hover:bg-white/5 transition-colors duration-200">
                                <td className="p-4 font-medium text-white">{item.productName}</td>
                                <td className="p-4 text-gray-300">{item.category}</td>
                                <td className="p-4 text-gray-300">{item.stock}</td>
                                <td className="p-4 text-gray-300">{item.supplier}</td>
                                <td className="p-4 text-center">
                                    <ModernButton onClick={() => setSelectedItem(item)} className="!px-3 !py-1.5 text-xs">
                                        View Details
                                    </ModernButton>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <div className="md:hidden space-y-4">
                {inventoryData.map(item => (
                    <div key={item.id} className="bg-black/20 rounded-xl p-4 shadow-lg" onClick={() => setSelectedItem(item)}>
                        <div className="flex justify-between items-start">
                            <div>
                                <p className="font-bold text-lg text-white">{item.productName}</p>
                                <p className="text-sm text-purple-300">{item.category}</p>
                            </div>
                            <div className="text-right">
                                <p className="font-bold text-lg text-white">{item.stock}</p>
                                <p className="text-sm text-gray-300">In Stock</p>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
            <InventoryDetailModal item={selectedItem} onClose={() => setSelectedItem(null)} />
        </div>
    );
};
const BillingDetailModal = ({ invoice, onClose }) => {
    if (!invoice) return null;
    const getStatusClass = (status) => {
        switch (status) {
            case 'Paid': return 'bg-green-500/20 text-green-300';
            case 'Pending': return 'bg-yellow-500/20 text-yellow-300';
            case 'Overdue': return 'bg-red-500/20 text-red-300';
            default: return 'bg-gray-500/20 text-gray-300';
        }
    };
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fadeIn" onClick={onClose}>
            <div className="bg-slate-900 border border-white/20 rounded-2xl shadow-2xl max-w-2xl w-full p-8 relative animate-fadeIn max-h-[90vh] overflow-y-auto" onClick={e => e.stopPropagation()}>
                <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors"><XCircle size={28} /></button>
                <div className="flex flex-col sm:flex-row justify-between items-start mb-6">
                    <div>
                        <h2 className="text-3xl font-bold text-white">Invoice {invoice.invoiceId}</h2>
                        <p className="text-gray-300">To: {invoice.patientName}</p>
                        <p className="text-gray-400 text-sm">Issued on: {invoice.date}</p>
                    </div>
                    <span className={`mt-2 sm:mt-0 px-3 py-1 text-sm font-semibold rounded-full ${getStatusClass(invoice.status)} h-fit`}>
                        {invoice.status}
                    </span>
                </div>
                <div className="bg-white/5 rounded-lg p-4 overflow-x-auto">
                    <table className="w-full text-left min-w-[400px]">
                        <thead>
                            <tr className="border-b border-white/10 text-white">
                                <th className="p-2 font-semibold">Item Description</th>
                                <th className="p-2 font-semibold text-center">Qty</th>
                                <th className="p-2 font-semibold text-right">Price</th>
                                <th className="p-2 font-semibold text-right">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            {invoice.items.map((item, index) => (
                                <tr key={index} className="text-gray-300">
                                    <td className="p-2">{item.name}</td>
                                    <td className="p-2 text-center">{item.qty}</td>
                                    <td className="p-2 text-right">${item.price.toFixed(2)}</td>
                                    <td className="p-2 text-right">${(item.qty * item.price).toFixed(2)}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
                <div className="flex justify-end mt-6">
                    <div className="text-right">
                        <p className="text-gray-300">Subtotal: <span className="font-semibold text-white">${invoice.amount.toFixed(2)}</span></p>
                        <p className="text-gray-300">Tax (0%): <span className="font-semibold text-white">$0.00</span></p>
                        <p className="text-xl font-bold text-white mt-2 border-t border-white/20 pt-2">Total: ${invoice.amount.toFixed(2)}</p>
                    </div>
                </div>
            </div>
        </div>
    );
};
const BillingView = () => {
    const [selectedInvoice, setSelectedInvoice] = useState(null);
    const getStatusClass = (status) => {
        switch (status) {
            case 'Paid': return 'bg-green-500/20 text-green-300';
            case 'Pending': return 'bg-yellow-500/20 text-yellow-300';
            case 'Overdue': return 'bg-red-500/20 text-red-300';
            default: return 'bg-gray-500/20 text-gray-300';
        }
    };
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white animate-fadeIn">
            <PageHeader title="Billing">
                <ModernButton icon={<Plus size={16} />}>Create Invoice</ModernButton>
            </PageHeader>
            <div className="hidden md:block bg-black/20 rounded-xl shadow-lg overflow-x-auto">
                <table className="w-full text-left">
                    <thead>
                        <tr className="border-b border-white/10">
                            <th className="p-4 font-semibold text-sm">Invoice ID</th>
                            <th className="p-4 font-semibold text-sm">Patient</th>
                            <th className="p-4 font-semibold text-sm">Date</th>
                            <th className="p-4 font-semibold text-sm">Amount</th>
                            <th className="p-4 font-semibold text-sm">Status</th>
                            <th className="p-4 font-semibold text-sm text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {billingData.map(invoice => (
                            <tr key={invoice.id} className="border-b border-white/10 hover:bg-white/5 transition-colors duration-200">
                                <td className="p-4 font-mono text-sm">{invoice.invoiceId}</td>
                                <td className="p-4 font-medium text-white">{invoice.patientName}</td>
                                <td className="p-4 text-gray-300">{invoice.date}</td>
                                <td className="p-4 text-gray-300">${invoice.amount.toFixed(2)}</td>
                                <td className="p-4">
                                    <span className={`px-3 py-1 text-xs font-semibold rounded-full ${getStatusClass(invoice.status)}`}>
                                        {invoice.status}
                                    </span>
                                </td>
                                <td className="p-4 text-center">
                                    <ModernButton onClick={() => setSelectedInvoice(invoice)} className="!px-3 !py-1.5 text-xs">
                                        View Details
                                    </ModernButton>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <div className="md:hidden space-y-4">
                {billingData.map(invoice => (
                    <div key={invoice.id} className="bg-black/20 rounded-xl p-4 shadow-lg" onClick={() => setSelectedInvoice(invoice)}>
                        <div className="flex justify-between items-start">
                            <div>
                                <p className="font-bold text-lg text-white">{invoice.patientName}</p>
                                <p className="text-sm text-gray-300 font-mono">{invoice.invoiceId}</p>
                            </div>
                            <span className={`px-3 py-1 text-xs font-semibold rounded-full ${getStatusClass(invoice.status)}`}>
                                {invoice.status}
                            </span>
                        </div>
                        <div className="mt-4 text-right">
                            <p className="text-xl font-bold text-white">${invoice.amount.toFixed(2)}</p>
                            <p className="text-sm text-gray-400">on {invoice.date}</p>
                        </div>
                    </div>
                ))}
            </div>
            <BillingDetailModal invoice={selectedInvoice} onClose={() => setSelectedInvoice(null)} />
        </div>
    );
};

const ReportView = ({ setActivePage }) => {
    const [activeTab, setActiveTab] = useState('Dosha Analysis');
    const [activeIndex, setActiveIndex] = useState(0);
    const onPieEnter = (_, index) => setActiveIndex(index);
    const reportTabs = ['Dosha Analysis', 'Activity Trends', 'Dietary Insights'];

    const renderReportContent = () => {
        switch(activeTab) {
            case 'Dosha Analysis':
                return (
                    <div className="animate-fadeIn grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
                        <div className="bg-black/20 p-6 rounded-2xl flex flex-col items-center justify-center h-[400px]">
                            <h3 className="text-xl font-semibold text-white mb-4">Current Dosha Balance</h3>
                            <div style={{ width: '100%', height: 300 }}>
                                <ResponsiveContainer>
                                    <PieChart>
                                        <Pie data={doshaData} dataKey="value" nameKey="name" cx="50%" cy="50%" innerRadius={70} outerRadius={110} fill="#8884d8" paddingAngle={5} activeIndex={activeIndex} activeShape={renderActiveShape} onMouseEnter={onPieEnter}>
                                            {doshaData.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)}
                                        </Pie>
                                    </PieChart>
                                </ResponsiveContainer>
                            </div>
                        </div>
                        <div className="text-gray-300">
                            <h3 className="text-2xl font-bold text-white mb-4">Understanding Your Doshas</h3>
                            <p className="mb-4">Your report indicates a primary constitution of <span className="text-purple-300 font-semibold">Vata-Pitta</span>. This unique blend of energies governs your physiological and psychological tendencies.</p>
                            <p className="mb-2"><strong className="text-white">Vata (Air & Ether):</strong> This energy is associated with movement, creativity, and vitality. When in balance, it fosters enthusiasm and adaptability. An excess can lead to anxiety and dryness.</p>
                            <p><strong className="text-white">Pitta (Fire & Water):</strong> This dosha governs metabolism, digestion, and intelligence. Balanced Pitta brings courage and a sharp intellect, while an imbalance can manifest as irritability and inflammation.</p>
                        </div>
                    </div>
                );
            case 'Activity Trends':
                 return (
                    <div className="animate-fadeIn space-y-6">
                        <h3 className="text-2xl font-semibold text-white">Your Weekly Activity</h3>
                        <div className="bg-black/20 p-6 rounded-2xl">
                             <div style={{ width: '100%', height: 350 }}>
                                 <ResponsiveContainer>
                                     <BarChart data={weeklyActivityData} margin={{ top: 20, right: 20, left: -20, bottom: 5 }}>
                                         <XAxis dataKey="name" stroke="rgba(255, 255, 255, 0.5)" axisLine={false} tickLine={false} />
                                         <YAxis stroke="rgba(255, 255, 255, 0.5)" axisLine={false} tickLine={false} />
                                         <Tooltip contentStyle={{ backgroundColor: 'rgba(20, 20, 20, 0.8)', border: '1px solid rgba(255,255,255,0.2)', color: '#fff', borderRadius: '10px' }} cursor={{fill: 'rgba(136, 132, 216, 0.1)'}} />
                                         <Legend wrapperStyle={{color: '#fff'}}/>
                                         <Bar dataKey="calories" fill="#818CF8" name="Calories" radius={[10, 10, 0, 0]} barSize={20} />
                                         <Bar dataKey="steps" fill="#A78BFA" name="Steps" radius={[10, 10, 0, 0]} barSize={20} />
                                     </BarChart>
                                 </ResponsiveContainer>
                             </div>
                         </div>
                    </div>
                 );
            case 'Dietary Insights':
                 return (
                    <div className="animate-fadeIn text-gray-300 space-y-4">
                         <h3 className="text-2xl font-semibold text-white mb-2">Personalized Dietary Insights</h3>
                         <p>Based on your <span className="text-purple-300 font-semibold">Vata-Pitta</span> constitution, focus on a diet that is both grounding and cooling. Emphasize sweet, bitter, and astringent tastes while being mindful of pungent, sour, and salty foods.</p>
                         <div className="grid grid-cols-1 md:grid-cols-2 gap-6 pt-4">
                            <div className="bg-black/20 p-4 rounded-xl">
                                <h4 className="font-semibold text-white text-lg mb-2">Foods to Favor</h4>
                                <ul className="list-disc list-inside text-sm space-y-1">
                                    <li>Sweet, ripe fruits like berries, melons, and avocados.</li>
                                    <li>Cooked grains such as rice, oats, and quinoa.</li>
                                    <li>Cooling vegetables like cucumber, sweet potatoes, and leafy greens.</li>
                                    <li>Ghee and coconut oil in moderation.</li>
                                </ul>
                            </div>
                             <div className="bg-black/20 p-4 rounded-xl">
                                <h4 className="font-semibold text-white text-lg mb-2">Foods to Reduce</h4>
                                <ul className="list-disc list-inside text-sm space-y-1">
                                    <li>Spicy and hot foods like chilies and excessive garlic.</li>
                                    <li>Sour foods like yogurt, cheese, and tomatoes.</li>
                                    <li>Dry and light foods such as crackers and raw vegetables.</li>
                                    <li>Caffeine and carbonated drinks.</li>
                                </ul>
                            </div>
                         </div>
                    </div>
                 );
            default: return null;
        }
    }

    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white">
            <PageHeader title="Full Health Report">
                 <ModernButton onClick={() => setActivePage('Dashboard')}>Back to Dashboard</ModernButton>
            </PageHeader>
            <div className="bg-black/20 rounded-xl shadow-lg">
                <div className="border-b border-white/10 px-4">
                    <nav className="flex space-x-1 sm:space-x-4">
                        {reportTabs.map(tab => (
                            <button key={tab} onClick={() => setActiveTab(tab)}
                                className={`py-4 px-2 text-sm font-medium transition-colors duration-200 whitespace-nowrap ${activeTab === tab ? 'text-purple-400 border-b-2 border-purple-400' : 'text-gray-400 hover:text-white'}`}
                            >
                                {tab}
                            </button>
                        ))}
                    </nav>
                </div>
                <div className="p-6">
                    {renderReportContent()}
                </div>
            </div>
        </div>
    )
}

const SettingsView = () => {
    const [activeTab, setActiveTab] = useState('Profile');
    const [notifications, setNotifications] = useState({
        emailAppointments: true,
        emailNewsletters: false,
        smsReminders: true,
    });
    const handleToggle = (key) => {
        setNotifications(prev => ({ ...prev, [key]: !prev[key] }));
    };
    const renderSettingsContent = () => {
        switch (activeTab) {
            case 'Profile':
                return (
                    <div className="animate-fadeIn">
                        <h3 className="text-2xl font-semibold text-white mb-6">Profile Information</h3>
                        <div className="space-y-6">
                            <div className="flex flex-col sm:flex-row items-center gap-6">
                                <img src="https://i.pravatar.cc/150?img=10" alt="Practitioner" className="w-24 h-24 rounded-full object-cover border-4 border-white/20"/>
                                <div className="text-center sm:text-left">
                                    <ModernButton icon={<Edit3 size={16}/>}>Change Photo</ModernButton>
                                    <p className="text-sm text-gray-400 mt-2">JPG, GIF or PNG. 1MB max.</p>
                                </div>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label className="text-sm font-medium text-gray-300">Full Name</label>
                                    <input type="text" defaultValue="Dr. Evelyn Reed" className="w-full mt-2 bg-white/5 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-400"/>
                                </div>
                                <div>
                                    <label className="text-sm font-medium text-gray-300">Email Address</label>
                                    <input type="email" defaultValue="evelyn.reed@ayurveda.clinic" className="w-full mt-2 bg-white/5 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-400"/>
                                </div>
                            </div>
                            <ModernButton className="bg-purple-600/50 hover:bg-purple-600/80 border-purple-500">Save Changes</ModernButton>
                        </div>
                    </div>
                );
            case 'Clinic':
                return (
                    <div className="animate-fadeIn">
                        <h3 className="text-2xl font-semibold text-white mb-6">Clinic Details</h3>
                        <div className="space-y-6">
                            <div>
                                <label className="text-sm font-medium text-gray-300">Clinic Name</label>
                                <input type="text" defaultValue="AyurVeda Wellness Center" className="w-full mt-2 bg-white/5 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-400"/>
                            </div>
                            <div>
                                <label className="text-sm font-medium text-gray-300">Address</label>
                                <textarea rows="3" defaultValue="123 Dharma Lane, Wellness City, 12345" className="w-full mt-2 bg-white/5 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-400"/>
                            </div>
                            <ModernButton className="bg-purple-600/50 hover:bg-purple-600/80 border-purple-500">Save Changes</ModernButton>
                        </div>
                    </div>
                );
            case 'Notifications':
                return (
                    <div className="animate-fadeIn">
                        <h3 className="text-2xl font-semibold text-white mb-6">Notification Preferences</h3>
                        <div className="space-y-6">
                            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 bg-white/5 rounded-lg">
                                <div className="mb-2 sm:mb-0">
                                    <p className="font-medium text-white">Email for Appointments</p>
                                    <p className="text-sm text-gray-400">Receive email notifications for new bookings and cancellations.</p>
                                </div>
                                <div onClick={() => handleToggle('emailAppointments')} className={`w-14 h-8 flex items-center rounded-full px-1 cursor-pointer transition-colors duration-300 flex-shrink-0 ${notifications.emailAppointments ? 'bg-purple-600' : 'bg-slate-600'}`}>
                                    <span className={`w-6 h-6 rounded-full bg-white transform transition-transform duration-300 ${notifications.emailAppointments ? 'translate-x-6' : 'translate-x-0'}`}/>
                                </div>
                            </div>
                            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 bg-white/5 rounded-lg">
                                <div className="mb-2 sm:mb-0">
                                    <p className="font-medium text-white">Email Newsletters</p>
                                    <p className="text-sm text-gray-400">Receive occasional newsletters with Ayurvedic tips and offers.</p>
                                </div>
                                <div onClick={() => handleToggle('emailNewsletters')} className={`w-14 h-8 flex items-center rounded-full px-1 cursor-pointer transition-colors duration-300 flex-shrink-0 ${notifications.emailNewsletters ? 'bg-purple-600' : 'bg-slate-600'}`}>
                                    <span className={`w-6 h-6 rounded-full bg-white transform transition-transform duration-300 ${notifications.emailNewsletters ? 'translate-x-6' : 'translate-x-0'}`}/>
                                </div>
                            </div>
                            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 bg-white/5 rounded-lg">
                                <div className="mb-2 sm:mb-0">
                                    <p className="font-medium text-white">SMS Reminders</p>
                                    <p className="text-sm text-gray-400">Send SMS reminders to patients 24 hours before appointments.</p>
                                </div>
                                <div onClick={() => handleToggle('smsReminders')} className={`w-14 h-8 flex items-center rounded-full px-1 cursor-pointer transition-colors duration-300 flex-shrink-0 ${notifications.smsReminders ? 'bg-purple-600' : 'bg-slate-600'}`}>
                                    <span className={`w-6 h-6 rounded-full bg-white transform transition-transform duration-300 ${notifications.smsReminders ? 'translate-x-6' : 'translate-x-0'}`}/>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            default:
                return null;
        }
    };
    const settingsTabs = [
        { name: 'Profile', icon: <UserCircle size={20} /> },
        { name: 'Clinic', icon: <Building size={20} /> },
        { name: 'Notifications', icon: <Bell size={20} /> },
    ];
    return (
        <div className="p-4 sm:p-6 lg:p-8 text-white animate-fadeIn">
            <PageHeader title="Settings" />
            <div className="bg-black/20 rounded-xl shadow-lg min-h-[400px] flex flex-col lg:flex-row">
                <nav className="w-full lg:w-64 border-b lg:border-b-0 lg:border-r border-white/10 p-4">
                    <ul className="flex flex-row overflow-x-auto lg:flex-col gap-2">
                        {settingsTabs.map(tab => (
                            <li key={tab.name}>
                                <button onClick={() => setActiveTab(tab.name)} className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg text-left transition-colors duration-300 ${activeTab === tab.name ? 'bg-white/10' : 'text-gray-300 hover:bg-white/10 hover:text-white'}`}>
                                    {tab.icon}
                                    <span className="font-medium text-sm">{tab.name}</span>
                                </button>
                            </li>
                        ))}
                    </ul>
                </nav>
                <div className="flex-1 p-6 md:p-8">
                    {renderSettingsContent()}
                </div>
            </div>
        </div>
    );
};
const Chatbot = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([
        { from: 'bot', text: 'Namaste! How can I help you with your Ayurvedic health journey today?' }
    ]);
    const [input, setInput] = useState('');
    const chatEndRef = useRef(null);
    useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);
    const handleSend = () => {
        if (input.trim() === '') return;
        const newMessages = [...messages, { from: 'user', text: input }];
        setMessages(newMessages);
        setInput('');
        setTimeout(() => {
            setMessages(prev => [...prev, { from: 'bot', text: 'Thank you for your question. I am analyzing it based on Ayurvedic principles...' }]);
        }, 1000);
    };
    return (
        <div>
            <button onClick={() => setIsOpen(!isOpen)} className="fixed bottom-6 right-6 bg-gradient-to-br from-purple-600 to-indigo-700 text-white p-4 rounded-full shadow-2xl hover:scale-110 transition-transform duration-300 z-50" aria-label="Toggle Chatbot">
                {isOpen ? <X size={28} /> : <Bot size={28} />}
            </button>
            <div className={`fixed bottom-24 right-6 w-[350px] h-[500px] bg-slate-900/70 backdrop-blur-xl border border-white/20 rounded-2xl shadow-2xl flex flex-col transition-all duration-500 z-40 ${isOpen ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10 pointer-events-none'}`}>
                <div className="p-4 border-b border-white/20">
                    <h3 className="text-white font-semibold text-lg text-center">AyurBot Assistant</h3>
                </div>
                <div className="flex-1 p-4 overflow-y-auto space-y-4">
                    {messages.map((msg, index) => (
                        <div key={index} className={`flex items-end gap-2 ${msg.from === 'user' ? 'justify-end' : 'justify-start'}`}>
                            {msg.from === 'bot' && <div className="w-8 h-8 bg-indigo-500 rounded-full flex items-center justify-center flex-shrink-0"><Bot size={20} className="text-white" /></div>}
                            <div className={`max-w-[75%] p-3 rounded-2xl ${msg.from === 'user' ? 'bg-purple-600 text-white rounded-br-none' : 'bg-slate-700 text-gray-200 rounded-bl-none'}`}>
                                <p className="text-sm">{msg.text}</p>
                            </div>
                        </div>
                    ))}
                    <div ref={chatEndRef} />
                </div>
                <div className="p-4 border-t border-white/20">
                    <div className="flex items-center bg-slate-800 rounded-full">
                        <input type="text" value={input} onChange={(e) => setInput(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleSend()} placeholder="Ask about your diet..." className="w-full bg-transparent text-white px-4 py-2 focus:outline-none" />
                        <button onClick={handleSend} className="p-2 text-white hover:text-purple-300 transition-colors">
                            <Send size={20} />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

const NotificationsPanel = ({ panelRef }) => {
    const newNotifications = [
        { id: 1, icon: <Calendar size={20} />, text: "New appointment with Anjali Sharma", time: "5m ago" },
        { id: 2, icon: <CreditCard size={20} />, text: "Invoice INV-2023-002 paid", time: "25m ago" },
    ];

    const olderNotifications = [
        { id: 3, icon: <User size={20} />, text: "Patient record for Rohan Verma updated", time: "1h ago" },
        { id: 4, icon: <Package size={20} />, text: "Stock for Triphala Churna is low", time: "1d ago" },
        { id: 5, icon: <Leaf size={20} />, text: "New diet plan assigned to Priya Singh", time: "2d ago" },
    ];


    return (
        <div ref={panelRef} className="absolute right-0 top-14 w-80 bg-slate-900 border border-white/20 rounded-2xl shadow-2xl z-20 animate-fadeInDown backdrop-blur-xl overflow-hidden">
            <div className="p-4 border-b border-white/10">
                <h3 className="font-semibold text-white">Notifications</h3>
            </div>
            <div className="max-h-96 overflow-y-auto">
                {newNotifications.length > 0 && (
                    <div className="p-2">
                        <h4 className="text-xs font-bold text-gray-400 uppercase tracking-wider mb-1 px-3">New</h4>
                        {newNotifications.map(notif => (
                            <div key={notif.id} className="flex items-start gap-3 p-3 rounded-lg hover:bg-white/10 cursor-pointer">
                                <div className="text-purple-300 mt-1">{notif.icon}</div>
                                <div>
                                    <p className="text-sm text-gray-200">{notif.text}</p>
                                    <p className="text-xs text-gray-400 mt-1">{notif.time}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
                {olderNotifications.length > 0 && (
                     <div className="p-2">
                        <h4 className="text-xs font-bold text-gray-400 uppercase tracking-wider my-1 px-3 border-t border-white/10 pt-2">Older</h4>
                         {olderNotifications.map(notif => (
                            <div key={notif.id} className="flex items-start gap-3 p-3 rounded-lg hover:bg-white/10 cursor-pointer">
                                <div className="text-purple-300 mt-1">{notif.icon}</div>
                                <div>
                                    <p className="text-sm text-gray-200">{notif.text}</p>
                                    <p className="text-xs text-gray-400 mt-1">{notif.time}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
                 {(newNotifications.length === 0 && olderNotifications.length === 0) && (
                    <p className="text-center text-sm text-gray-400 p-4">No new notifications.</p>
                )}
            </div>
             <div className="p-2 border-t border-white/10 text-center bg-black/20">
                 <a href="#" className="text-sm text-purple-300 hover:underline">View all notifications</a>
            </div>
        </div>
    );
};


export default function App() {
    const [activePage, setActivePage] = useState('Dashboard');
    const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
    const notificationsRef = useRef(null);

    const navItems = [
        { name: 'Dashboard', icon: <LayoutDashboard size={20} /> },
        { name: 'Patients', icon: <User size={20} /> },
        { name: 'Appointments', icon: <Calendar size={20} /> },
        { name: 'Diet Plans', icon: <Leaf size={20} /> },
        { name: 'Consultations', icon: <Stethoscope size={20} /> },
        { name: 'Inventory', icon: <Package size={20} /> },
        { name: 'Billing', icon: <CreditCard size={20} /> },
        { name: 'Settings', icon: <Settings size={20} /> },
    ];

    useEffect(() => {
        const handleClickOutside = (event) => {
            // Check if the click is outside the notifications panel and not on the bell button itself
            if (notificationsRef.current && !notificationsRef.current.contains(event.target) && !event.target.closest('#notification-button')) {
                setIsNotificationsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);

    const renderContent = () => {
        switch (activePage) {
            case 'Dashboard': return <DashboardView setActivePage={setActivePage} />;
            case 'Patients': return <PatientsView />;
            case 'Appointments': return <AppointmentsView />;
            case 'Diet Plans': return <DietPlansView />;
            case 'Consultations': return <ConsultationsView />;
            case 'Inventory': return <InventoryView />;
            case 'Billing': return <BillingView />;
            case 'Reports': return <ReportView setActivePage={setActivePage} />;
            case 'Settings': return <SettingsView />;
            default: return <DashboardView setActivePage={setActivePage} />;
        }
    };

    return (
        <div className="min-h-screen bg-slate-900 text-gray-200 font-sans relative overflow-hidden">
            <div 
                className="absolute inset-0 bg-cover bg-center filter blur-lg scale-110"
                style={{backgroundImage: `url('https://images.unsplash.com/photo-1534439829553-6e3692a5b145?q=80&w=2574&auto=format&fit=crop')`}}
            ></div>
            <div className="relative flex min-h-screen bg-black/40">
                {/* Thin Sidebar */}
                 <nav className="hidden md:flex flex-col items-center gap-4 w-20 bg-black/30 backdrop-blur-lg border-r border-white/10 py-6">
                    <a href="#" className="mb-4"><Logo /></a>
                     <div className="flex flex-col gap-2">
                        {navItems.map(item => (
                            <button
                                key={item.name}
                                onClick={() => setActivePage(item.name)}
                                title={item.name}
                                className={`w-12 h-12 flex items-center justify-center rounded-lg transition-all duration-300 relative group ${activePage === item.name ? 'bg-white/20 text-white' : 'text-gray-400 hover:bg-white/10 hover:text-white'}`}
                            >
                                {item.icon}
                                {activePage === item.name && <span className="absolute left-0 top-1/2 -translate-y-1/2 h-6 w-1 bg-purple-400 rounded-r-full"></span>}
                                <span className="absolute left-16 w-auto p-2 text-xs text-white bg-slate-800 rounded-md shadow-lg scale-0 group-hover:scale-100 transition-transform duration-200 origin-left">{item.name}</span>
                            </button>
                        ))}
                    </div>
                    <div className="mt-auto">
                        <img src="https://i.pravatar.cc/150?img=10" alt="Practitioner" className="w-10 h-10 rounded-full object-cover border-2 border-white/20"/>
                    </div>
                </nav>

                {/* Main Content */}
                <div className="flex-1 flex flex-col">
                    {/* Top Nav */}
                    <header className="hidden md:flex items-center justify-between p-4 h-20 bg-black/10 backdrop-blur-lg border-b border-white/10">
                         <div className="flex items-center gap-4">
                             <h1 className="text-xl font-bold text-white">{activePage}</h1>
                         </div>
                         <div className="flex items-center gap-4">
                             <SearchInput />
                             <div className="relative">
                                <button id="notification-button" onClick={() => setIsNotificationsOpen(prev => !prev)} className="relative">
                                     <Bell size={20} className="text-gray-300 hover:text-white cursor-pointer"/>
                                     <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                                 </button>
                                {isNotificationsOpen && <NotificationsPanel panelRef={notificationsRef} />}
                             </div>
                         </div>
                    </header>
                    
                    <main className="flex-1 overflow-y-auto pb-20 md:pb-0">
                         {renderContent()}
                    </main>
                </div>
                
                <Chatbot />

                 {/* Mobile Bottom Nav */}
                <nav className="md:hidden fixed bottom-0 left-0 right-0 bg-black/50 backdrop-blur-lg border-t border-white/10 z-50">
                     <div className="flex justify-around p-1">
                        {navItems.slice(0, 5).map(item => (
                            <button
                                key={item.name}
                                onClick={() => setActivePage(item.name)}
                                className={`flex flex-col items-center justify-center flex-shrink-0 w-16 h-16 rounded-lg transition-colors duration-200 ${activePage === item.name ? 'text-purple-400' : 'text-gray-400'}`}
                            >
                                {item.icon}
                                <span className="text-xs mt-1 font-medium">{item.name}</span>
                            </button>
                        ))}
                    </div>
                </nav>
            </div>
            <style>{`
                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');
                body { font-family: 'Inter', sans-serif; }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .animate-fadeIn {
                    animation: fadeIn 0.5s ease-in-out forwards;
                }
                 @keyframes fadeInDown {
                    from { opacity: 0; transform: translateY(-10px) scale(0.95); }
                    to { opacity: 1; transform: translateY(0) scale(1); }
                }
                .animate-fadeInDown {
                    animation: fadeInDown 0.2s ease-in-out forwards;
                    transform-origin: top right;
                }
            `}</style>
        </div>
    );
}

